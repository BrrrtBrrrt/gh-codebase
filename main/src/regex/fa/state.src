State = {}

State._transitions = null
State._initialFlag = false
State._endFlag = false
State._id = -1

State.init1 = function()
    self._transitions = []
end function

State.init2 = function(pId)
    self.init1
    self._id = pId
end function

State.connect = function(transition, pState)
    transition.setNextState(pState)
    self._transitions.push(transition)
end function

State.getTransitions = function()
    return self._transitions
end function

State.isInitial = function()
    return self._initialFlag
end function

State.setInitial = function(initialFlag)
    self._initialFlag = initialFlag
end function

State.isEnd = function()
    return self._endFlag
end function

State.setEnd = function(endFlag)
    self._endFlag = endFlag
end function

State.getId = function()
    return self._id
end function

State.setId = function(id)
    self._id = id
end function

State.hasTransitions = function()
    return self._transitions != null and self._transitions.len > 0
end function

State.compareTo = function(pState)
    return self._id - pState.getId
end function

State.equals = function(obj)
    if obj == self then return true
    if obj == null then return false
    if not (obj isa State) then return false
    if self._id != obj.getId then return false
    return true
end function

State.toString = function()
    buffer = ""
    label = char(self._id)
    if self._initialFlag then label += "-Start"
    if self._endFlag then label -= "-Accepted"
    buffer += char(self._id) + " [label="""
    buffer += label
    buffer += """];" + char(32)
    for t in self._transitions
        buffer += char(self._id)
        buffer += " -> "
        buffer += char(t.getNextState.getId)
        buffer += "[label="""
        buffer += t.toString
        buffer += """]"
        buffer += ";" + char(32)
    end for
    return buffer
end function

module.exports = State