#import Set from ../../collections/set;
#import ListsUtil from ../../collections/lists/util;

Automaton = {}

Automaton._stateCount = null
Automaton._initialState = null
Automaton._lastState = null
Automaton._alphabet = null
Automaton._states = null

Automaton.init1 = function()
    self._alphabet = new Set
    self._states = []
    self._stateCount = 0
end function

Automaton.init2 = function(firstState)
    self.init1
    self._initialState = firstState
    self._build
end function

Automaton.getStateCount = function()
    return self._stateCount
end function

Automaton.setStateCount = function(stateCount)
    self._stateCount = stateCount
end function

Automaton.getInitialState = function()
    return self._initialState
end function

Automaton.setIntialState = function(initialState)
    self._initialState = initialState
end function

Automaton.addToAlphabet = function(pTransition)
    return self._alphabet.add(pTransition)
end function

Automaton.getAlphabet = function()
    return self._alphabet.toList
end function

Automaton.getLastState = function()
    return self._lastState
end function

Automaton.getStateList = function()
    return self._states
end function

Automaton.toString = function()
    builder = ""
    visited = []
    for i in range(0, stateCount.len - 1)
        visited.push(false)
    end for
    self._navigateAndPrint(builder, self._initialState, visited)
end function

Automaton._navigateAndPrint = function(builder, pState, visited)
    if pState == null then return
    visited[pState.getId] = true
    builder += pState.toString
    transitions = pState.getTransitions
    if transitions != null then
        for t in transitions
            nextState = t.getNextState
            if not visited[nextState.getId] then self._navigateAndPrint(builder, nextState, visited)
        end for
    end if
end function

Automaton._build = function()
    stateQueue = []

    stateQueue.push(self._initialState)
    self._stateCount += 1
    self._initialState.setId(self._stateCount)

    while stateQueue.len > 0
        pollResult = ListsUtil.poll(stateQueue)
        stateQueue = pollResult[1]
        state = pollResult[0]
        self._states.push(state)
        if state.getTransitions != null then
            for t in state.getTransitions
                self._alphabet.add(t)
                childState = t.getNextState
                if childState.getId == -1 then
                    self._stateCount += 1
                    childState.setId(self._stateCount)
                    stateQueue.add(childState)
                end if
            end for
        end if
    end while
end function

module.exports = Automaton