#import Token from token;

Parser = {}

Parser.lexicalAnalyzer = null
Parser.token = null

Parser.init = function(pLexicalAnalyzer)
    self.lexicalAnalyzer = pLexicalAnalyzer
end function

Parser.analyze = function()
    // start symbol (forwarding symbol)
    self._readNextToken

    print(self.token)

    /*if token == null then
        exit("SyntaxException: Regex empty.")
    end if
    // root node of syntax tree
    root = createNode(Token.ROOT)

    // main production Rest of analysis is recursive.
    n = prRegexp()

    // parsing finished. Add root of abstract syntax tree to root node.
    addChildNode(root, n)

    // it should not more tokens.
    if token != null then
        parseError("Not balanced expression")
    end if

    return root*/
end function

Parser._readNextToken = function()
    if self.lexicalAnalyzer.readToken then
        token = self.lexicalAnalyzer.getToken
    else
        token = null
    end if
end function

module.exports = Parser