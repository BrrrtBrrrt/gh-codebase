#import Token from token;
#import CollectionsUtil from ../../collections/util;

LexicalAnalyzer = {}

LexicalAnalyzer._logPrefix = "main.src.regex.parser.lexicalAnalyzer: "

LexicalAnalyzer._regex = null
LexicalAnalyzer._index = null
LexicalAnalyzer._token = null
LexicalAnalyzer._character = null
LexicalAnalyzer._tokenValue = null
LexicalAnalyzer._ignoredChars = [char(11), " "] // ["\t", " "]
LexicalAnalyzer._escape_chars = ["(", ")", "*", "+", "-", ".", "?", "[", "\", "]", "^", "s", "t", "|"] // ["(", ")", "*", "+", "-", ".", "?", "[", "\\", "]", "^", "s", "t", "|"]
LexicalAnalyzer._escape_chars_value = ["(", ")", "*", "+", "-", ".", "?", "[", "\", "]", "^", " ", char(11), "|"] // ["(", ")", "*", "+", "-", ".", "?", "[", "\\", "]", "^", "s", "t", "|"]

LexicalAnalyzer.init = function(pRegex)
    escape_chars_tmp = []
    for escape_char in self._escape_chars
        escape_chars_tmp.push(escape_char.code)
    end for
    escape_chars_tmp = escape_chars_tmp.sort
    self._escape_chars = []
    for escape_char_tmp in escape_chars_tmp
        self._escape_chars.push(char(escape_char_tmp))
    end for

    if pRegex == null then
        exit(self._logPrefix + "(init) IllegalArgumentException: Empty regex")
    end if
    self._regex = pRegex
    self._index = 0
    self._character = 0
end function

LexicalAnalyzer.readToken = function()
    charRead = self._readCharacter
    if charRead then
        if self._character == "[".code then
            self._token = Token.L_BRACKET
            self._tokenValue = "[".code
        else if self._character == "(".code then
            self._token = Token.L_PARENTHESIS
            self._tokenValue = "(".code
        else if self._character == ")".code then
            self._token = Token.R_PARENTHESIS
            self._tokenValue = ")".code
        else if self._character == "+".code or self._character == "*".code or self._character == "?".code then
            self._token = Token.QUANTIFIER
            self._tokenValue = char(character)
        else if self._character == "|".code then
            self._token = Token.PIPE
            self._tokenValue = "|"
        else if self._character == "\".code then
            self._verifyEscapeCharacters
        else
            if self._isValidChar(self._character) then
                self._token = Token.CHAR
                self._tokenValue = char(self._character)
            else
                self._lexError("Charecter not valid.")
            end if
        end if
    end if
    return charRead
end function

LexicalAnalyzer.getIndex = function()
    return self._index
end function

LexicalAnalyzer.getToken = function()
    return self._token
end function

LexicalAnalyzer.setToken = function(token)
    self._token = token
end function

LexicalAnalyzer.getTokenValue = function()
    return char(self._tokenValue)
end function

LexicalAnalyzer._isValidChar = function(pCharacter)
    return pCharacter > 32 and pCharacter < 65535
end function

LexicalAnalyzer._verifyEscapeCharacters = function()
    if self._readCharacter then
        charIndex = self._findEscapedChar(self._character)
        if charIndex >= 0 then
            self._token = Token.ESCAPE
            self._tokenValue = char(self._escape_chars_value[charIndex]);
        else
            self._lexError("Character " + self._character + " can not be scaped")
        end if
    else
        self._lexError(" [" + self._escape_chars.join(", ") + "]")
    end if
end function

LexicalAnalyzer._findEscapedChar = function(pCharacter)
    return CollectionsUtil.binarySearch(self._escape_chars, pCharacter)
end function

LexicalAnalyzer._isIgnoredChar = function(pCharacter)
    return CollectionsUtil.binarySearch(self._ignoredChars, pCharacter) >= 0
end function

LexicalAnalyzer._readCharacter = function()
    charRead = false
    while not charRead and self._index < self._regex.len
        self._index += 1
        self._character = self._regex.values[self._index]
        charRead = not self._isIgnoredChar(self._character)
    end while
    return charRead
end function

LexicalAnalyzer._lexError = function(errorMessage)
    exit(self._logPrefix + "LexerException: (" + self._index + ") " + errorMessage)
end function

module.exports = LexicalAnalyzer