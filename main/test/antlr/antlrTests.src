#import Assertions from ../assertions;
#import Antlr from ../../src/antlr/antlr;

AntlrTests = {}

AntlrTests._logPrefix = "main.test.collections.antlrTests: "

AntlrTests.run = function()
    timestampTest = time

    self._testFactorGrammar()
    //self._testJsonGrammar()

    print(self._logPrefix + "Tests ok, execution time: " + (time - timestampTest) + "s")
end function

AntlrTests._testFactorGrammar = function()
    grammar = ""
    grammar += "<expr> ::= <factor> <expr-D>" + char(10)
    grammar += "<expr-D> ::= '+' <factor> <expr-D> | ''" + char(10)
    grammar += "<factor> ::= <number> <factor-D>" + char(10)
    grammar += "<factor-D> ::= '*' <number> <factor-D> | ''" + char(10)
    grammar += "<number> ::= <digit> <number-D>" + char(10)
    grammar += "<number-D> ::= '0' <number-D> | '1' <number-D> | '2' <number-D> | '3' <number-D> | '4' <number-D> | '5' <number-D> | '6' <number-D> | '7' <number-D> | '8' <number-D> | '9' <number-D> | ''" + char(10)
    grammar += "<digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'" + char(10)

    input = "1+2*3+123+42*322"

    antlr = new Antlr

    timestamp = time()
    generateParserResponse = antlr.generateParser(grammar)
    print("antlr.generateParser(grammar) execution time: " + (time() - timestamp) + "s")
    if generateParserResponse.error then
        exit(generateParserResponse.toString())
    end if
    parser = generateParserResponse.value

    timestamp = time()
    parseResponse = parser.parse(input, true)
    print("parser.parse(input) execution time: " + (time() - timestamp) + "s")
    if parseResponse.error then
        exit(parseResponse.toString())
    end if
    parseResponse.value.printGraph()
end function

AntlrTests._testJsonGrammar = function()
    grammar = ""
    grammar += "<json> ::= <object> | <array>" + char(10)
    grammar += "<object> ::= '{' <ignored-space> [ <members> ] <ignored-space> '}'" + char(10)
    grammar += "<members> ::= <pair> | <pair> ',' <ignored-space> <members>" + char(10)
    grammar += "<pair> ::= <string> <ignored-space> ':' <ignored-space> <value>" + char(10)
    grammar += "<array> ::= '[' <ignored-space> [ <elements> ] <ignored-space> ']'" + char(10)
    grammar += "<elements> ::= <value> | <value> ',' <ignored-space> <elements>" + char(10)
    grammar += "<value> ::= <string> | <number> | '{' <ignored-space> [ <members> ] <ignored-space> '}' | '[' <ignored-space> [ <elements> ] <ignored-space> ']' | 'true' | 'false' | 'null'" + char(10)
    grammar += "<string> ::= '""' <characters> '""'" + char(10)
    grammar += "<characters> ::= <character> | <character> <characters>" + char(10)
    grammar += "<character> ::= <letter> | <symbol> | <digit>" + char(10)
    grammar += "<letter> ::= <letter-lower> | <letter-upper>" + char(10)
    grammar += "<letter-lower> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'ä' | 'ö' | 'ü' | 'ß'" + char(10)
    grammar += "<letter-upper> ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'Ä' | 'Ö' | 'Ü'" + char(10)
    grammar += "<symbol> ::= '|' | ' ' | '!' | '#' | '$' | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '>' | '=' | '<' | '?' | '@' | '[' | '" + char(92) + "' | ']' | '^' | '_' | '`' | '{' | '}' | '~'" + char(10)
    grammar += "<number> ::= <int> | <int> '.' <int> | <int> 'e' <int> | <int> '.' <int> 'e' <int>" + char(10)
    grammar += "<int> ::= <digit> | <digit> <int>" + char(10)
    grammar += "<digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'" + char(10)
    grammar += "<ignored-space> ::= ' ' <ignored-space> | '" + char(10) + "' <ignored-space> | ''" + char(10)

    print(grammar)

    input = ""
    input += "{" + char(10)
    input += "    ""error"": false," + char(10)
    input += "    ""messages"": []," + char(10)
    input += "    ""executionCostsRaw"": 0.20510799999999996," + char(10)
    input += "    ""executionCosts"": ""$0.2051""," + char(10)
    input += "    ""aAdobeStockImageGenerationInputs"": [" + char(10)
    input += "        {" + char(10)
    input += "            ""imageTitle"": ""Abstract Colorful Shapes""," + char(10)
    input += "            ""prompt"": ""Create a vibrant and dynamic abstract image with colorful shapes that overlap and blend together in a unique and eye-catching way.""," + char(10)
    input += "            ""category"": ""Grafische Elemente""," + char(10)
    input += "            ""keywords"": [" + char(10)
    input += "                ""Abstract""," + char(10)
    input += "                ""Colorful""," + char(10)
    input += "                ""Shapes""," + char(10)
    input += "                ""Overlap""," + char(10)
    input += "                ""Blend""," + char(10)
    input += "                ""Vibrant""," + char(10)
    input += "                ""Dynamic""," + char(10)
    input += "                ""Artistic""," + char(10)
    input += "                ""Generative AI""," + char(10)
    input += "                ""Generative""," + char(10)
    input += "                ""AI""," + char(10)
    input += "                ""Design""," + char(10)
    input += "                ""Graphic""," + char(10)
    input += "                ""Modern""" + char(10)
    input += "            ]," + char(10)
    input += "            ""imageFilePaths"": [" + char(10)
    input += "                ""C:\\Users\\htrhsrtsh\\Downloads\\images\\\\3bb79e8a-b0b7-45ac-8352-5cd7b6ad589c_0.png""" + char(10)
    input += "            ]" + char(10)
    input += "        }," + char(10)
    input += "        {" + char(10)
    input += "            ""imageTitle"": ""Whimsical Underwater World""," + char(10)
    input += "            ""prompt"": ""Create a whimsical and magical image of an underwater world with colorful coral reefs, playful sea creatures, and a sense of wonder and enchantment.""," + char(10)
    input += "            ""category"": ""Umwelt""," + char(10)
    input += "            ""keywords"": [" + char(10)
    input += "                ""Whimsical""," + char(10)
    input += "                ""Underwater World""," + char(10)
    input += "                ""Colorful Coral Reefs""," + char(10)
    input += "                ""Playful Sea Creatures""," + char(10)
    input += "                ""Wonder""," + char(10)
    input += "                ""Enchantment""," + char(10)
    input += "                ""Artistic""," + char(10)
    input += "                ""Generative AI""," + char(10)
    input += "                ""Generative""," + char(10)
    input += "                ""AI""," + char(10)
    input += "                ""Nature""," + char(10)
    input += "                ""Fantasy""," + char(10)
    input += "                ""Mystical""" + char(10)
    input += "            ]," + char(10)
    input += "            ""imageFilePaths"": [" + char(10)
    input += "                ""C:\\Users\\htrhsrtsh\\Downloads\\images\\\\d0158a21-596a-4bc3-b6d4-831ae5d274e0_0.png""" + char(10)
    input += "            ]" + char(10)
    input += "        }," + char(10)
    input += "        {" + char(10)
    input += "            ""imageTitle"": ""Abstract Cityscape""," + char(10)
    input += "            ""prompt"": ""Create an abstract image of a cityscape with bold and dynamic shapes, vibrant colors, and interesting patterns that capture the energy and excitement of the urban environment.""," + char(10)
    input += "            ""category"": ""Grafische Elemente""," + char(10)
    input += "            ""keywords"": [" + char(10)
    input += "                ""Abstract""," + char(10)
    input += "                ""Cityscape""," + char(10)
    input += "                ""Bold Shapes""," + char(10)
    input += "                ""Dynamic Shapes""," + char(10)
    input += "                ""Vibrant Colors""," + char(10)
    input += "                ""Interesting Patterns""," + char(10)
    input += "                ""Energy""," + char(10)
    input += "                ""Excitement""," + char(10)
    input += "                ""Artistic""," + char(10)
    input += "                ""Generative AI""," + char(10)
    input += "                ""Generative""," + char(10)
    input += "                ""AI""," + char(10)
    input += "                ""Design""," + char(10)
    input += "                ""Graphic""" + char(10)
    input += "            ]," + char(10)
    input += "            ""imageFilePaths"": [" + char(10)
    input += "                ""C:\\Users\\htrhsrtsh\\Downloads\\images\\\\0d682bfe-3ebb-4d10-809e-d9f27d6b5276_0.png""" + char(10)
    input += "            ]" + char(10)
    input += "        }" + char(10)
    input += "    ]" + char(10)
    input += "}" + char(10)

    antlr = new Antlr

    timestamp = time()
    generateParserResponse = antlr.generateParser(grammar)
    print("antlr.generateParser(grammar) execution time: " + (time() - timestamp) + "s")
    if generateParserResponse.error then
        print("ERROR")
        exit(generateParserResponse.toString())
    end if
    parser = generateParserResponse.value

    timestamp = time()
    parseResponse = parser.parse(input, true)
    print("parser.parse(input) execution time: " + (time() - timestamp) + "s")
    if parseResponse.error then
        print("ERROR")
        exit(parseResponse.toString())
    end if
    parseResponse.value.printGraph()
end function

module.exports = AntlrTests