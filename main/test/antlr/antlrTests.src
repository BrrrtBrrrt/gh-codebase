#import Assertions from ../assertions;
#import Antlr from ../../src/antlr/antlr;

AntlrTests = {}

AntlrTests._logPrefix = "main.test.collections.antlrTests: "

AntlrTests.run = function()
    timestamp = time

    grammar = ""
    grammar += "<expr> ::= <factor> <expr-D>" + char(10)
    grammar += "<expr-D> ::= '+' <factor> <expr-D> | ''" + char(10)
    grammar += "<factor> ::= <number> <factor-D>" + char(10)
    grammar += "<factor-D> ::= '*' <number> <factor-D> | ''" + char(10)
    grammar += "<number> ::= <digit> <number-D>" + char(10)
    grammar += "<number-D> ::= '0' <number-D> | '1' <number-D> | '2' <number-D> | '3' <number-D> | '4' <number-D> | '5' <number-D> | '6' <number-D> | '7' <number-D> | '8' <number-D> | '9' <number-D> | ''" + char(10)
    grammar += "<digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'" + char(10)

    input = "1+2*3+123+42*322"

    antlr = new Antlr

    timestamp = time()
    generateParserResponse = antlr.generateParser(grammar)
    print("antlr.generateParser(grammar) execution time: " + (time() - timestamp) + "s")
    if generateParserResponse.error then
        exit(generateParserResponse.toString())
    end if
    parser = generateParserResponse.value

    timestamp = time()
    parseResponse = parser.parse(input, true)
    print("parser.parse(input) execution time: " + (time() - timestamp) + "s")
    if parseResponse.error then
        exit(parseResponse.toString())
    end if
    print(parseResponse.value.printGraph())

    print(self._logPrefix + "Tests ok, execution time: " + (time - timestamp) + "s")
end function

module.exports = AntlrTests